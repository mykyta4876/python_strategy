import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
from tqdm import tqdm

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger()

# Load the CSV file with proper encoding
file_path = 'horse_racing_data.csv'
logger.info(f"Loading data from {file_path}")
data = pd.read_csv(file_path, encoding='ISO-8859-1', parse_dates=['date'])

# Convert 'trainer' column to string and handle NaN values
data['trainer'] = data['trainer'].fillna('').astype(str)

# Truncate the 'trainer' column to 31 characters and store it in 'short_trainer'
data['short_trainer'] = data['trainer'].str[:31]

# Create a list of unique trainers and their corresponding short names
trainers = data[['trainer', 'short_trainer']].drop_duplicates()

# Get the list of unique courses
courses = sorted(data['course'].unique())
logger.info(f"Found {len(courses)} unique courses")

# Create an empty Excel writer object
output_file = 'trainer_appearances.xlsx'
logger.info(f"Creating Excel file: {output_file}")

with pd.ExcelWriter(output_file, engine='xlsxwriter') as writer:
    total_trainers = len(trainers)
    for index, (trainer, short_trainer) in tqdm(trainers.iterrows(), total=total_trainers, desc="Processing trainers"):
        # Filter data for the specific trainer
        trainer_data = data[data['trainer'] == trainer]

        # Get all unique dates from the dataset
        all_dates = pd.date_range(start=data['date'].min(), end=data['date'].max(), freq='D')

        # Prepare data for the DataFrame
        appearances = trainer_data.groupby('date').size().reindex(all_dates, fill_value=0)
        wins = trainer_data[trainer_data['position'] == 1].groupby('date').size().reindex(all_dates, fill_value=0)

        df_data = {
            'date': all_dates,
            'appearances': appearances,
            'wins': wins
        }

        # Calculate cumulative appearances and wins for different time windows
        for window in [365, 90, 30]:
            df_data[f'{window} Day Appearances'] = appearances.rolling(window=window, min_periods=1).sum()
            df_data[f'{window} Day Wins'] = wins.rolling(window=window, min_periods=1).sum()
            df_data[f'{window} Day Win Rate'] = df_data[f'{window} Day Wins'] / df_data[f'{window} Day Appearances'].replace(0, np.inf)

        # Calculate Total Win Rate Difference (30 Day - 90 Day)
        df_data['Total Win Rate Difference'] = df_data['30 Day Win Rate'] - df_data['90 Day Win Rate']

        # Calculate course-specific wins for each time window
        for course in courses:
            course_data = trainer_data[trainer_data['course'] == course]
            for window in [365, 90, 30]:
                column_name = f'{course} {window} Day Wins'
                course_wins = course_data[course_data['position'] == 1].groupby('date').size().reindex(all_dates, fill_value=0)
                df_data[column_name] = course_wins.rolling(window=window, min_periods=1).sum()

        # Create the DataFrame all at once
        appearances_df = pd.DataFrame(df_data)

        # Write the trainer's data to a sheet in the Excel file
        appearances_df.to_excel(writer, sheet_name=short_trainer, index=False)

        # Conditional formatting to highlight significant differences
        workbook = writer.book
        worksheet = writer.sheets[short_trainer]
        last_column = len(df_data.keys())
        worksheet.conditional_format(1, last_column - 1, len(all_dates), last_column - 1, {
            'type': '3_color_scale',
            'min_color': "#FFC7CE",
            'mid_color': "#FFFFFF",
            'max_color': "#C6EFCE"
        })

logger.info(f"Trainer appearances, win rates, and course-specific wins written to '{output_file}'")
